Triage engine
=============

* Detect hangs.

* Reduced cases are now treated as if the llvm/clang versions don't
  affect them (the versions used are stored in the database, but
  nothing is done with them, except that when there is a change in a
  crash reason, they are removed and thus will be rereduced). Figure
  out the right way of using this information.

* Write code to tell apart creduce failure from failure in our
  property check script?

* Check that llvm-symbolizer is on path, since that makes the outputs
  much more readable.

* On clang executions, somehow detect a totally botched execution
  (like the binary missing). Now it seems to be recorded as a success.

* Locking: Detect that clang_triage is already running for some of the
  resources (like the repositories and/or the database).


Database
========


Reducer
=======

* Maybe parallelize the dumb reductions?

* Perhaps split dumb reduce worker from creduce worker? S.t. the dumb
  reducer is run for cases where the result in DB is 'creduce_failed'
  or something.

* Sometimes CReduce leaves stray clang_delta processes running.
  Figure out what can be done about that.

* Investigate why SIGTERMing (Ctrl-c) creduce occasionally results in
  a failure to remove the creduce tmpdir, indirectly resulting in
  failure to remove the clang_triage tmpdir.

* Do not outright remove outdated reduced cases; mark and show them in
  report as possibly outdated.

* Detect new creduce version when deciding to remove/outdate reduced
  cases.


Report
======

* Show failed reduces?

* Split report generation: First part queries the DB and outputs JSON,
  the other part reads the JSON and generates the report.

* Figure out a better templating engine (for xhtml) than pystache.

* Might make sense to sort creduced cases earlier in report than
  dumb-reduced ones?

* Possibly make make_sha_tree() remove old items from the tree
  (preferably without being racy wrt previous report)

  * However there are nice sides to not removing e.g. old reduced
    cases so links stay valid even if they are no longer referenced in
    report


Tools
=====


Misc
====

* Also import cases other than those that once crashed, striving for
  maximum coverage?

* Also import those of the cases that afl designated as hangs that
  actually are hangs.

* Some kind of test framework.
