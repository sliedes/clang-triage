Triage engine
=============

* Detect hangs

* CReduced cases are now treated as if the llvm/clang versions don't
  affect them (the versions used are stored in the database, but
  nothing is done with them). Figure out the right way of using it.

* Do the triage runs in parallel

* Write code to tell apart creduce failure from failure in our
  property check script?

* More controlled report generation instead of the current
  update-hook.sh

* Handle update/build failures

Database
========

* The 'failed' value for creduce_result is probably not needed anymore
  (unless renamed to 'creduce_failed', grep below for the idea)

Reducer
=======

* Maybe parallelize the dumb reductions?

* Perhaps split dumb reduce worker from creduce worker? S.t. the dumb
  reducer is run for cases where the result in DB is 'creduce_failed'
  or something.

Report
======

* Do not show all runs from the beginning of time, but do something
  more clever

* Show failed reduces?

* Split report generation: First part queries the DB and outputs JSON,
  the other part reads the JSON and generates the report

* Figure out a better templating engine (for xhtml) than pystache

* Might make sense to sort creduced cases earlier in report?

Tools
=====

* Make import tool accept s/h/sha1 directory hierarchies like those
  generated by the export tools

Misc
====

* Also import cases other than those that once crashed, striving for
  maximum coverage?

* Also import those of the cases that afl designated as hangs that
  actually are hangs

* Some kind of test framework

* Rename export_blobs to export_cases
